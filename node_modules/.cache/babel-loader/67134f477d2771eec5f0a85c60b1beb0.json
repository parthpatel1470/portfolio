{"ast":null,"code":"module.exports = {\n  /**\n   * Detect the type of `value`. Returns 'integer', 'float', 'boolean' or 'string'; defaults to 'string'.\n   *\n   * @param {*} value\n   *\n   * @returns {String}\n   */\n  detect: function (value) {\n    value += '';\n\n    if (value.search(/^\\-?\\d+$/) > -1) {\n      return 'integer';\n    }\n\n    if (value.search(/^\\-?\\d+\\.\\d+[\\d.]*$/) > -1) {\n      return 'float';\n    }\n\n    if ('false' === value || 'true' === value) {\n      return 'boolean';\n    }\n\n    if (value.search(/^\\d{4}\\-\\d{2}\\-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z?$/) > -1) {\n      return 'datetime';\n    }\n\n    return 'string';\n  },\n\n  /**\n   * Cast `value` to given `type`.\n   *\n   * @param {*}      value\n   * @param {String} [type]\n   *\n   * @returns {*}\n   */\n  cast: function (value, type) {\n    type = type || 'smart';\n\n    switch (type) {\n      case 'boolean':\n      case 'bool':\n        if (typeof value !== 'string') {\n          value = !!value;\n        } else {\n          value = ['null', 'undefined', '0', 'false'].indexOf(value) === -1;\n        }\n\n        break;\n\n      case 'string':\n      case 'text':\n        value = this.cast(value, 'boolean') ? value + '' : null;\n        break;\n\n      case 'date':\n      case 'datetime':\n        value = new Date(value);\n        break;\n\n      case 'int':\n      case 'integer':\n      case 'number':\n        value = ~~value;\n        break;\n\n      case 'float':\n        value = parseFloat(value);\n        break;\n\n      case 'smart':\n        value = this.cast(value, this.detect(value));\n        break;\n\n      default:\n        throw new Error('Expected valid casting type.');\n    }\n\n    return value;\n  }\n};","map":{"version":3,"sources":["/home/parth/Desktop/protfolio/protfolio/node_modules/typer/index.js"],"names":["module","exports","detect","value","search","cast","type","indexOf","Date","parseFloat","Error"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiB;AACf;;;;;;;AAOAC,EAAAA,MAAM,EAAG,UAAUC,KAAV,EAAiB;AACxBA,IAAAA,KAAK,IAAI,EAAT;;AAEA,QAAIA,KAAK,CAACC,MAAN,CAAa,UAAb,IAA2B,CAAC,CAAhC,EAAmC;AACjC,aAAO,SAAP;AACD;;AAED,QAAID,KAAK,CAACC,MAAN,CAAa,qBAAb,IAAsC,CAAC,CAA3C,EAA8C;AAC5C,aAAO,OAAP;AACD;;AAED,QAAI,YAAYD,KAAZ,IAAqB,WAAWA,KAApC,EAA2C;AACzC,aAAO,SAAP;AACD;;AAED,QAAIA,KAAK,CAACC,MAAN,CAAa,kDAAb,IAAmE,CAAC,CAAxE,EAA2E;AACzE,aAAO,UAAP;AACD;;AAED,WAAO,QAAP;AACD,GA5Bc;;AA8Bf;;;;;;;;AAQAC,EAAAA,IAAI,EAAG,UAAUF,KAAV,EAAiBG,IAAjB,EAAuB;AAC5BA,IAAAA,IAAI,GAAGA,IAAI,IAAI,OAAf;;AAEA,YAAQA,IAAR;AACE,WAAK,SAAL;AACA,WAAK,MAAL;AACE,YAAI,OAAOH,KAAP,KAAiB,QAArB,EAA+B;AAC7BA,UAAAA,KAAK,GAAG,CAAC,CAACA,KAAV;AACD,SAFD,MAEO;AACLA,UAAAA,KAAK,GAAG,CAAC,MAAD,EAAS,WAAT,EAAsB,GAAtB,EAA2B,OAA3B,EAAoCI,OAApC,CAA4CJ,KAA5C,MAAuD,CAAC,CAAhE;AACD;;AAED;;AAEF,WAAK,QAAL;AACA,WAAK,MAAL;AACEA,QAAAA,KAAK,GAAG,KAAKE,IAAL,CAAUF,KAAV,EAAiB,SAAjB,IAA8BA,KAAK,GAAG,EAAtC,GAA2C,IAAnD;AACA;;AAEF,WAAK,MAAL;AACA,WAAK,UAAL;AACEA,QAAAA,KAAK,GAAG,IAAIK,IAAJ,CAASL,KAAT,CAAR;AACA;;AAEF,WAAK,KAAL;AACA,WAAK,SAAL;AACA,WAAK,QAAL;AACEA,QAAAA,KAAK,GAAG,CAAC,CAACA,KAAV;AACA;;AAEF,WAAK,OAAL;AACEA,QAAAA,KAAK,GAAGM,UAAU,CAACN,KAAD,CAAlB;AACA;;AAEF,WAAK,OAAL;AACEA,QAAAA,KAAK,GAAG,KAAKE,IAAL,CAAUF,KAAV,EAAiB,KAAKD,MAAL,CAAYC,KAAZ,CAAjB,CAAR;AACA;;AAEF;AACE,cAAM,IAAIO,KAAJ,CAAU,8BAAV,CAAN;AApCJ;;AAuCA,WAAOP,KAAP;AACD;AAjFc,CAAjB","sourcesContent":["module.exports = {\n  /**\n   * Detect the type of `value`. Returns 'integer', 'float', 'boolean' or 'string'; defaults to 'string'.\n   *\n   * @param {*} value\n   *\n   * @returns {String}\n   */\n  detect : function (value) {\n    value += '';\n\n    if (value.search(/^\\-?\\d+$/) > -1) {\n      return 'integer';\n    }\n\n    if (value.search(/^\\-?\\d+\\.\\d+[\\d.]*$/) > -1) {\n      return 'float';\n    }\n\n    if ('false' === value || 'true' === value) {\n      return 'boolean';\n    }\n\n    if (value.search(/^\\d{4}\\-\\d{2}\\-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z?$/) > -1) {\n      return 'datetime';\n    }\n\n    return 'string';\n  },\n\n  /**\n   * Cast `value` to given `type`.\n   *\n   * @param {*}      value\n   * @param {String} [type]\n   *\n   * @returns {*}\n   */\n  cast : function (value, type) {\n    type = type || 'smart';\n\n    switch (type) {\n      case 'boolean':\n      case 'bool':\n        if (typeof value !== 'string') {\n          value = !!value;\n        } else {\n          value = ['null', 'undefined', '0', 'false'].indexOf(value) === -1;\n        }\n\n        break;\n\n      case 'string':\n      case 'text':\n        value = this.cast(value, 'boolean') ? value + '' : null\n        break;\n\n      case 'date':\n      case 'datetime':\n        value = new Date(value);\n        break;\n\n      case 'int':\n      case 'integer':\n      case 'number':\n        value = ~~value;\n        break;\n\n      case 'float':\n        value = parseFloat(value);\n        break;\n\n      case 'smart':\n        value = this.cast(value, this.detect(value));\n        break;\n\n      default:\n        throw new Error('Expected valid casting type.');\n    }\n\n    return value;\n  }\n};\n"]},"metadata":{},"sourceType":"script"}